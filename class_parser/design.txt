

random code:

How to make class parser emit generic reflection code to be used at runtime by anything

#include <vector>
#include <string>

template <auto... Members>
struct Reflex {

    std::vector<int> v;
    Reflex(std::vector<int> v) :
        v(std::move(v))
    {}

    template <template<auto> typename T, size_t... indexes>
    void call(std::index_sequence<indexes...>)
    {
        (T<Members>()(this->v[indexes]), ...);
    }

    template <template<auto> typename T>
    void operator()() {
        call<T>(std::make_index_sequence<sizeof...(Members)>{});
    }
};

template <typename T>
struct ClassCallback;


class A {
    friend struct ClassCallback<A>;
private:
    int i;
    char j;
    double k;
};

template<>
struct ClassCallback<A> {
    static inline auto reflex = Reflex<&A::i, &A::j, &A::k>({1,2,3});

    template<auto member_pointer>
    struct DataMemberCallbackType {
        void operator()(int i) {

        }
    };
};


int main() {

    ClassCallback<A>::reflex.template operator()<ClassCallback<A>::DataMemberCallbackType>();

}






// END CODE


ast_action.h/cpp
PrintFunctionNamesAction : PluginASTAction
 - This is what is registered with clang


ast_consumer.h
ASTConsumer:
 - sets up matchers to define what data is of interest
 - binds different sets of data with a string name
 - specifies a class to be used for processing the matcher matches
  - ClassHandler


class_handler.h
ClassHandler : MatchFinder::MatchCallback
Two phases - build up data structures with all relevant data then
  a second phase to dump that data to appropriate output files

 - run() callback called for each matcher match (basically called once for each class)
  - builds up data structure of LOTS of things, many will not be present in the output files

 - onEndOfTranslationUnit() called after every match has been handled
  - uses all the built-up data structures to generate the js stub, bindings, and bidirectional types


OutputModule:

All classes that should be wrapped are sent to OutputModule

OutputStreamProvider provides output stream for any header/footer data to be written that is not class-specific

Classes are run through Criteria object to select only classes intended to be written by this OutputModule







Debug Context System:
----------------------

Channel?
 - WebSocketChannel - presumably it's the communication layer.  Implemented via websocketpp to connect to chrome debugger
  - poll/poll_one


DebugContext - inherits from both v8toolkit::Context and v8_inspector::V8InspectorClient

What is a V8InspectorClient?
 - runMessageLoopOnPause
 - quitMessageLoopOnPause
 - Contains the channel object
 - What does reset_session do?  it's called but has empty implementation...
 - v8_inspector::StringView has is8Bit() call
  - when is it 8 bit?  when is it not?  what is it when it's not? 16 bit?
    - I'm just throwing away every other bit.  Is that bad?





class DebugContext : public v8_inspector::V8InspectorClient, public v8toolkit::Context


class WebsocketChannel : public v8_inspector::V8Inspector::Channel

